{"id":"QqSX","dependencies":[{"name":"D:\\My Sorting Visualizer\\package.json","includedInParent":true,"mtime":1585838103465}],"generated":{"js":"\"use strict\";function e(e){switch(e){case 1:return\"\\n    <h3>BUBBLE SORT</h3>\\n    <p>do\\n   <br>\\n  swapped = false\\n <br>\\n     for i = 1 to indexOfLastUnsortedElement-1\\n <br>\\n     if leftElement > rightElement\\n <br>\\n      swap(leftElement, rightElement)\\n <br>\\n      swapped = true\\n <br>\\nwhile swapped</p>\";case 2:return\"\\n    <h3>MERGE SORT</h3>\\n    <p>split each element into partitions of size 1\\n <br>\\nrecursively merge adjacent partitions\\n <br>\\nfor i = leftPartIdx to rightPartIdx\\n <br>\\nif leftPartHeadValue <= rightPartHeadValue\\n <br>\\ncopy leftPartHeadValue\\n <br>\\nelse: copy rightPartHeadValue\\n <br>\\ncopy elements back to original array</p>\";case 3:return\"\\n    <h3>QUICK SORT</h3>\\n    <p>for each (unsorted) partition\\n <br>\\nset first element as pivot\\n <br>\\n  storeIndex = pivotIndex + 1\\n <br>\\n  for i = pivotIndex + 1 to rightmostIndex\\n <br>\\n    if element[i] < element[pivot]\\n <br>\\n      swap(i, storeIndex); storeIndex++\\n <br>\\n  swap(pivot, storeIndex - 1)</p>\";case 4:return\"\\n    <h3>HEAP SORT</h3>\\n    <p>heap_size = N;\\n <br>\\n        build_maxheap with array\\n         <br>\\n        for i = N to i >= 0 \\n         <br>\\n            swap(0th element,ith element)\\n             <br>\\n            heap_size = heap_size - 1\\n             <br>\\n            max_heapify(array, 1, heap_size)\\n             <br>\\n        \\n      max_heapify makes sure that the heap \\n      </br>\\n      remains maxheap\\n    </p>\"}}Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=void 0;var n=e;exports.default=n;"},"sourceMaps":{"js":{"mappings":[{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":0}},{"source":"algorithms/algorithmContent.js","original":{"line":3,"column":0},"generated":{"line":1,"column":13}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":3,"column":9},"generated":{"line":1,"column":22}},{"source":"algorithms/algorithmContent.js","name":"algoNumber","original":{"line":3,"column":20},"generated":{"line":1,"column":24}},{"source":"algorithms/algorithmContent.js","name":"algoNumber","original":{"line":68,"column":10},"generated":{"line":1,"column":27}},{"source":"algorithms/algorithmContent.js","name":"algoNumber","original":{"line":68,"column":10},"generated":{"line":1,"column":34}},{"source":"algorithms/algorithmContent.js","original":{"line":69,"column":9},"generated":{"line":1,"column":37}},{"source":"algorithms/algorithmContent.js","original":{"line":69,"column":9},"generated":{"line":1,"column":42}},{"source":"algorithms/algorithmContent.js","original":{"line":70,"column":14},"generated":{"line":1,"column":44}},{"source":"algorithms/algorithmContent.js","original":{"line":70,"column":14},"generated":{"line":1,"column":50}},{"source":"algorithms/algorithmContent.js","original":{"line":73,"column":9},"generated":{"line":1,"column":317}},{"source":"algorithms/algorithmContent.js","original":{"line":73,"column":9},"generated":{"line":1,"column":322}},{"source":"algorithms/algorithmContent.js","original":{"line":74,"column":14},"generated":{"line":1,"column":324}},{"source":"algorithms/algorithmContent.js","original":{"line":74,"column":14},"generated":{"line":1,"column":330}},{"source":"algorithms/algorithmContent.js","original":{"line":77,"column":9},"generated":{"line":1,"column":670}},{"source":"algorithms/algorithmContent.js","original":{"line":77,"column":9},"generated":{"line":1,"column":675}},{"source":"algorithms/algorithmContent.js","original":{"line":78,"column":14},"generated":{"line":1,"column":677}},{"source":"algorithms/algorithmContent.js","original":{"line":78,"column":14},"generated":{"line":1,"column":683}},{"source":"algorithms/algorithmContent.js","original":{"line":81,"column":9},"generated":{"line":1,"column":1006}},{"source":"algorithms/algorithmContent.js","original":{"line":81,"column":9},"generated":{"line":1,"column":1011}},{"source":"algorithms/algorithmContent.js","original":{"line":82,"column":14},"generated":{"line":1,"column":1013}},{"source":"algorithms/algorithmContent.js","original":{"line":82,"column":14},"generated":{"line":1,"column":1019}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1457}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1464}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1479}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1487}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1500}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1501}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1508}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1512}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1520}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1533}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1535}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1539}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1541}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1543}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1551}},{"source":"algorithms/algorithmContent.js","name":"getContent","original":{"line":90,"column":15},"generated":{"line":1,"column":1559}}],"sources":{"algorithms/algorithmContent.js":"//--------FUNCTION FOR DISPLAYING ALGORITHMS FOR DIFFERENT SORTING TECHNIQUES---------\r\n\r\nfunction getContent(algoNumber) {\r\n  const bubblesortAlgoHeading = \"BUBBLE SORT\";\r\n  const bubblesortAlgoPara = `do\r\n   <br>\r\n  swapped = false\r\n <br>\r\n     for i = 1 to indexOfLastUnsortedElement-1\r\n <br>\r\n     if leftElement > rightElement\r\n <br>\r\n      swap(leftElement, rightElement)\r\n <br>\r\n      swapped = true\r\n <br>\r\nwhile swapped`;\r\n\r\n  const mergesortAlgoHeading = \"MERGE SORT\";\r\n  const mergesortAlgoPara = `split each element into partitions of size 1\r\n <br>\r\nrecursively merge adjacent partitions\r\n <br>\r\nfor i = leftPartIdx to rightPartIdx\r\n <br>\r\nif leftPartHeadValue <= rightPartHeadValue\r\n <br>\r\ncopy leftPartHeadValue\r\n <br>\r\nelse: copy rightPartHeadValue\r\n <br>\r\ncopy elements back to original array`;\r\n\r\n  const quicksortAlgoHeading = \"QUICK SORT\";\r\n  const quicksortAlgoPara = `for each (unsorted) partition\r\n <br>\r\nset first element as pivot\r\n <br>\r\n  storeIndex = pivotIndex + 1\r\n <br>\r\n  for i = pivotIndex + 1 to rightmostIndex\r\n <br>\r\n    if element[i] < element[pivot]\r\n <br>\r\n      swap(i, storeIndex); storeIndex++\r\n <br>\r\n  swap(pivot, storeIndex - 1)`;\r\n\r\n  const heapsortAlgoHeading = \"HEAP SORT\";\r\n  const heapsortAlgoPara = `heap_size = N;\r\n <br>\r\n        build_maxheap with array\r\n         <br>\r\n        for i = N to i >= 0 \r\n         <br>\r\n            swap(0th element,ith element)\r\n             <br>\r\n            heap_size = heap_size - 1\r\n             <br>\r\n            max_heapify(array, 1, heap_size)\r\n             <br>\r\n        \r\n      max_heapify makes sure that the heap \r\n      </br>\r\n      remains maxheap\r\n    `;\r\n\r\n  switch (algoNumber) {\r\n    case 1:\r\n      return `\r\n    <h3>${bubblesortAlgoHeading}</h3>\r\n    <p>${bubblesortAlgoPara}</p>`;\r\n    case 2:\r\n      return `\r\n    <h3>${mergesortAlgoHeading}</h3>\r\n    <p>${mergesortAlgoPara}</p>`;\r\n    case 3:\r\n      return `\r\n    <h3>${quicksortAlgoHeading}</h3>\r\n    <p>${quicksortAlgoPara}</p>`;\r\n    case 4:\r\n      return `\r\n    <h3>${heapsortAlgoHeading}</h3>\r\n    <p>${heapsortAlgoPara}</p>`;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nexport default getContent;\r\n"},"lineCount":null}},"error":null,"hash":"2199f670c03cfe8f563d2757dcfeadc1","cacheData":{"env":{}}}