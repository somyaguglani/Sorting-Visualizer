{"id":"algorithms/algorithmContent.js","dependencies":[{"name":"D:\\My Sorting Visualizer\\package.json","includedInParent":true,"mtime":1585838103465}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n//--------FUNCTION FOR DISPLAYING ALGORITHMS FOR DIFFERENT SORTING TECHNIQUES---------\nfunction getContent(algoNumber) {\n  const bubblesortAlgoHeading = \"BUBBLE SORT\";\n  const bubblesortAlgoPara = `do\n   <br>\n  swapped = false\n <br>\n     for i = 1 to indexOfLastUnsortedElement-1\n <br>\n     if leftElement > rightElement\n <br>\n      swap(leftElement, rightElement)\n <br>\n      swapped = true\n <br>\nwhile swapped`;\n  const mergesortAlgoHeading = \"MERGE SORT\";\n  const mergesortAlgoPara = `split each element into partitions of size 1\n <br>\nrecursively merge adjacent partitions\n <br>\nfor i = leftPartIdx to rightPartIdx\n <br>\nif leftPartHeadValue <= rightPartHeadValue\n <br>\ncopy leftPartHeadValue\n <br>\nelse: copy rightPartHeadValue\n <br>\ncopy elements back to original array`;\n  const quicksortAlgoHeading = \"QUICK SORT\";\n  const quicksortAlgoPara = `for each (unsorted) partition\n <br>\nset first element as pivot\n <br>\n  storeIndex = pivotIndex + 1\n <br>\n  for i = pivotIndex + 1 to rightmostIndex\n <br>\n    if element[i] < element[pivot]\n <br>\n      swap(i, storeIndex); storeIndex++\n <br>\n  swap(pivot, storeIndex - 1)`;\n  const heapsortAlgoHeading = \"HEAP SORT\";\n  const heapsortAlgoPara = `heap_size = N;\n <br>\n        build_maxheap with array\n         <br>\n        for i = N to i >= 0 \n         <br>\n            swap(0th element,ith element)\n             <br>\n            heap_size = heap_size - 1\n             <br>\n            max_heapify(array, 1, heap_size)\n             <br>\n        \n      max_heapify makes sure that the heap \n      </br>\n      remains maxheap\n    `;\n\n  switch (algoNumber) {\n    case 1:\n      return `\n    <h3>${bubblesortAlgoHeading}</h3>\n    <p>${bubblesortAlgoPara}</p>`;\n\n    case 2:\n      return `\n    <h3>${mergesortAlgoHeading}</h3>\n    <p>${mergesortAlgoPara}</p>`;\n\n    case 3:\n      return `\n    <h3>${quicksortAlgoHeading}</h3>\n    <p>${quicksortAlgoPara}</p>`;\n\n    case 4:\n      return `\n    <h3>${heapsortAlgoHeading}</h3>\n    <p>${heapsortAlgoPara}</p>`;\n\n    default:\n      break;\n  }\n}\n\nvar _default = getContent;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":1,"column":0}},{"generated":{"line":9,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":3,"column":0}},{"name":"getContent","generated":{"line":9,"column":9},"source":"algorithms/algorithmContent.js","original":{"line":3,"column":9}},{"generated":{"line":9,"column":19},"source":"algorithms/algorithmContent.js","original":{"line":3,"column":0}},{"name":"algoNumber","generated":{"line":9,"column":20},"source":"algorithms/algorithmContent.js","original":{"line":3,"column":20}},{"generated":{"line":9,"column":30},"source":"algorithms/algorithmContent.js","original":{"line":3,"column":0}},{"generated":{"line":9,"column":32},"source":"algorithms/algorithmContent.js","original":{"line":3,"column":32}},{"generated":{"line":10,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":4,"column":2}},{"name":"bubblesortAlgoHeading","generated":{"line":10,"column":8},"source":"algorithms/algorithmContent.js","original":{"line":4,"column":8}},{"generated":{"line":10,"column":29},"source":"algorithms/algorithmContent.js","original":{"line":4,"column":29}},{"generated":{"line":10,"column":32},"source":"algorithms/algorithmContent.js","original":{"line":4,"column":32}},{"generated":{"line":10,"column":45},"source":"algorithms/algorithmContent.js","original":{"line":4,"column":2}},{"generated":{"line":11,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":5,"column":2}},{"name":"bubblesortAlgoPara","generated":{"line":11,"column":8},"source":"algorithms/algorithmContent.js","original":{"line":5,"column":8}},{"generated":{"line":11,"column":26},"source":"algorithms/algorithmContent.js","original":{"line":5,"column":26}},{"generated":{"line":11,"column":29},"source":"algorithms/algorithmContent.js","original":{"line":5,"column":30}},{"generated":{"line":23,"column":14},"source":"algorithms/algorithmContent.js","original":{"line":5,"column":2}},{"generated":{"line":24,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":19,"column":2}},{"name":"mergesortAlgoHeading","generated":{"line":24,"column":8},"source":"algorithms/algorithmContent.js","original":{"line":19,"column":8}},{"generated":{"line":24,"column":28},"source":"algorithms/algorithmContent.js","original":{"line":19,"column":28}},{"generated":{"line":24,"column":31},"source":"algorithms/algorithmContent.js","original":{"line":19,"column":31}},{"generated":{"line":24,"column":43},"source":"algorithms/algorithmContent.js","original":{"line":19,"column":2}},{"generated":{"line":25,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":20,"column":2}},{"name":"mergesortAlgoPara","generated":{"line":25,"column":8},"source":"algorithms/algorithmContent.js","original":{"line":20,"column":8}},{"generated":{"line":25,"column":25},"source":"algorithms/algorithmContent.js","original":{"line":20,"column":25}},{"generated":{"line":25,"column":28},"source":"algorithms/algorithmContent.js","original":{"line":20,"column":29}},{"generated":{"line":37,"column":37},"source":"algorithms/algorithmContent.js","original":{"line":20,"column":2}},{"generated":{"line":38,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":34,"column":2}},{"name":"quicksortAlgoHeading","generated":{"line":38,"column":8},"source":"algorithms/algorithmContent.js","original":{"line":34,"column":8}},{"generated":{"line":38,"column":28},"source":"algorithms/algorithmContent.js","original":{"line":34,"column":28}},{"generated":{"line":38,"column":31},"source":"algorithms/algorithmContent.js","original":{"line":34,"column":31}},{"generated":{"line":38,"column":43},"source":"algorithms/algorithmContent.js","original":{"line":34,"column":2}},{"generated":{"line":39,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":35,"column":2}},{"name":"quicksortAlgoPara","generated":{"line":39,"column":8},"source":"algorithms/algorithmContent.js","original":{"line":35,"column":8}},{"generated":{"line":39,"column":25},"source":"algorithms/algorithmContent.js","original":{"line":35,"column":25}},{"generated":{"line":39,"column":28},"source":"algorithms/algorithmContent.js","original":{"line":35,"column":29}},{"generated":{"line":51,"column":30},"source":"algorithms/algorithmContent.js","original":{"line":35,"column":2}},{"generated":{"line":52,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":49,"column":2}},{"name":"heapsortAlgoHeading","generated":{"line":52,"column":8},"source":"algorithms/algorithmContent.js","original":{"line":49,"column":8}},{"generated":{"line":52,"column":27},"source":"algorithms/algorithmContent.js","original":{"line":49,"column":27}},{"generated":{"line":52,"column":30},"source":"algorithms/algorithmContent.js","original":{"line":49,"column":30}},{"generated":{"line":52,"column":41},"source":"algorithms/algorithmContent.js","original":{"line":49,"column":2}},{"generated":{"line":53,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":50,"column":2}},{"name":"heapsortAlgoPara","generated":{"line":53,"column":8},"source":"algorithms/algorithmContent.js","original":{"line":50,"column":8}},{"generated":{"line":53,"column":24},"source":"algorithms/algorithmContent.js","original":{"line":50,"column":24}},{"generated":{"line":53,"column":27},"source":"algorithms/algorithmContent.js","original":{"line":50,"column":28}},{"generated":{"line":69,"column":5},"source":"algorithms/algorithmContent.js","original":{"line":50,"column":2}},{"generated":{"line":71,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":68,"column":2}},{"name":"algoNumber","generated":{"line":71,"column":10},"source":"algorithms/algorithmContent.js","original":{"line":68,"column":10}},{"generated":{"line":71,"column":20},"source":"algorithms/algorithmContent.js","original":{"line":68,"column":2}},{"generated":{"line":72,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":69,"column":4}},{"generated":{"line":72,"column":9},"source":"algorithms/algorithmContent.js","original":{"line":69,"column":9}},{"generated":{"line":72,"column":10},"source":"algorithms/algorithmContent.js","original":{"line":69,"column":4}},{"generated":{"line":73,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":70,"column":6}},{"generated":{"line":73,"column":13},"source":"algorithms/algorithmContent.js","original":{"line":70,"column":14}},{"name":"bubblesortAlgoHeading","generated":{"line":74,"column":10},"source":"algorithms/algorithmContent.js","original":{"line":71,"column":10}},{"generated":{"line":74,"column":31},"source":"algorithms/algorithmContent.js","original":{"line":71,"column":32}},{"name":"bubblesortAlgoPara","generated":{"line":75,"column":9},"source":"algorithms/algorithmContent.js","original":{"line":72,"column":9}},{"generated":{"line":75,"column":27},"source":"algorithms/algorithmContent.js","original":{"line":72,"column":28}},{"generated":{"line":75,"column":33},"source":"algorithms/algorithmContent.js","original":{"line":70,"column":6}},{"generated":{"line":77,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":73,"column":4}},{"generated":{"line":77,"column":9},"source":"algorithms/algorithmContent.js","original":{"line":73,"column":9}},{"generated":{"line":77,"column":10},"source":"algorithms/algorithmContent.js","original":{"line":73,"column":4}},{"generated":{"line":78,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":74,"column":6}},{"generated":{"line":78,"column":13},"source":"algorithms/algorithmContent.js","original":{"line":74,"column":14}},{"name":"mergesortAlgoHeading","generated":{"line":79,"column":10},"source":"algorithms/algorithmContent.js","original":{"line":75,"column":10}},{"generated":{"line":79,"column":30},"source":"algorithms/algorithmContent.js","original":{"line":75,"column":31}},{"name":"mergesortAlgoPara","generated":{"line":80,"column":9},"source":"algorithms/algorithmContent.js","original":{"line":76,"column":9}},{"generated":{"line":80,"column":26},"source":"algorithms/algorithmContent.js","original":{"line":76,"column":27}},{"generated":{"line":80,"column":32},"source":"algorithms/algorithmContent.js","original":{"line":74,"column":6}},{"generated":{"line":82,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":77,"column":4}},{"generated":{"line":82,"column":9},"source":"algorithms/algorithmContent.js","original":{"line":77,"column":9}},{"generated":{"line":82,"column":10},"source":"algorithms/algorithmContent.js","original":{"line":77,"column":4}},{"generated":{"line":83,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":78,"column":6}},{"generated":{"line":83,"column":13},"source":"algorithms/algorithmContent.js","original":{"line":78,"column":14}},{"name":"quicksortAlgoHeading","generated":{"line":84,"column":10},"source":"algorithms/algorithmContent.js","original":{"line":79,"column":10}},{"generated":{"line":84,"column":30},"source":"algorithms/algorithmContent.js","original":{"line":79,"column":31}},{"name":"quicksortAlgoPara","generated":{"line":85,"column":9},"source":"algorithms/algorithmContent.js","original":{"line":80,"column":9}},{"generated":{"line":85,"column":26},"source":"algorithms/algorithmContent.js","original":{"line":80,"column":27}},{"generated":{"line":85,"column":32},"source":"algorithms/algorithmContent.js","original":{"line":78,"column":6}},{"generated":{"line":87,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":81,"column":4}},{"generated":{"line":87,"column":9},"source":"algorithms/algorithmContent.js","original":{"line":81,"column":9}},{"generated":{"line":87,"column":10},"source":"algorithms/algorithmContent.js","original":{"line":81,"column":4}},{"generated":{"line":88,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":82,"column":6}},{"generated":{"line":88,"column":13},"source":"algorithms/algorithmContent.js","original":{"line":82,"column":14}},{"name":"heapsortAlgoHeading","generated":{"line":89,"column":10},"source":"algorithms/algorithmContent.js","original":{"line":83,"column":10}},{"generated":{"line":89,"column":29},"source":"algorithms/algorithmContent.js","original":{"line":83,"column":30}},{"name":"heapsortAlgoPara","generated":{"line":90,"column":9},"source":"algorithms/algorithmContent.js","original":{"line":84,"column":9}},{"generated":{"line":90,"column":25},"source":"algorithms/algorithmContent.js","original":{"line":84,"column":26}},{"generated":{"line":90,"column":31},"source":"algorithms/algorithmContent.js","original":{"line":82,"column":6}},{"generated":{"line":92,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":85,"column":4}},{"generated":{"line":93,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":86,"column":6}},{"generated":{"line":94,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":68,"column":2}},{"generated":{"line":95,"column":0},"source":"algorithms/algorithmContent.js","original":{"line":88,"column":1}},{"name":"getContent","generated":{"line":97,"column":15},"source":"algorithms/algorithmContent.js","original":{"line":90,"column":15}}],"sources":{"algorithms/algorithmContent.js":"//--------FUNCTION FOR DISPLAYING ALGORITHMS FOR DIFFERENT SORTING TECHNIQUES---------\r\n\r\nfunction getContent(algoNumber) {\r\n  const bubblesortAlgoHeading = \"BUBBLE SORT\";\r\n  const bubblesortAlgoPara = `do\r\n   <br>\r\n  swapped = false\r\n <br>\r\n     for i = 1 to indexOfLastUnsortedElement-1\r\n <br>\r\n     if leftElement > rightElement\r\n <br>\r\n      swap(leftElement, rightElement)\r\n <br>\r\n      swapped = true\r\n <br>\r\nwhile swapped`;\r\n\r\n  const mergesortAlgoHeading = \"MERGE SORT\";\r\n  const mergesortAlgoPara = `split each element into partitions of size 1\r\n <br>\r\nrecursively merge adjacent partitions\r\n <br>\r\nfor i = leftPartIdx to rightPartIdx\r\n <br>\r\nif leftPartHeadValue <= rightPartHeadValue\r\n <br>\r\ncopy leftPartHeadValue\r\n <br>\r\nelse: copy rightPartHeadValue\r\n <br>\r\ncopy elements back to original array`;\r\n\r\n  const quicksortAlgoHeading = \"QUICK SORT\";\r\n  const quicksortAlgoPara = `for each (unsorted) partition\r\n <br>\r\nset first element as pivot\r\n <br>\r\n  storeIndex = pivotIndex + 1\r\n <br>\r\n  for i = pivotIndex + 1 to rightmostIndex\r\n <br>\r\n    if element[i] < element[pivot]\r\n <br>\r\n      swap(i, storeIndex); storeIndex++\r\n <br>\r\n  swap(pivot, storeIndex - 1)`;\r\n\r\n  const heapsortAlgoHeading = \"HEAP SORT\";\r\n  const heapsortAlgoPara = `heap_size = N;\r\n <br>\r\n        build_maxheap with array\r\n         <br>\r\n        for i = N to i >= 0 \r\n         <br>\r\n            swap(0th element,ith element)\r\n             <br>\r\n            heap_size = heap_size - 1\r\n             <br>\r\n            max_heapify(array, 1, heap_size)\r\n             <br>\r\n        \r\n      max_heapify makes sure that the heap \r\n      </br>\r\n      remains maxheap\r\n    `;\r\n\r\n  switch (algoNumber) {\r\n    case 1:\r\n      return `\r\n    <h3>${bubblesortAlgoHeading}</h3>\r\n    <p>${bubblesortAlgoPara}</p>`;\r\n    case 2:\r\n      return `\r\n    <h3>${mergesortAlgoHeading}</h3>\r\n    <p>${mergesortAlgoPara}</p>`;\r\n    case 3:\r\n      return `\r\n    <h3>${quicksortAlgoHeading}</h3>\r\n    <p>${quicksortAlgoPara}</p>`;\r\n    case 4:\r\n      return `\r\n    <h3>${heapsortAlgoHeading}</h3>\r\n    <p>${heapsortAlgoPara}</p>`;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nexport default getContent;\r\n"},"lineCount":null}},"error":null,"hash":"af83155098d4b94f0fbf27056df7817d","cacheData":{"env":{}}}