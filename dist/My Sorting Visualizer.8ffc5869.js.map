{"version":3,"sources":["algorithms/mergeSort.js","algorithms/bubbleSort.js","algorithms/quickSort.js","algorithms/heapSort.js","algorithms/algorithmContent.js","index.js"],"names":["mergeSort","PRIMARY_COLOR","SECONDARY_COLOR","stateArray","otherObject","ANIMATION_SPEED_MS","animations","getMergeSortAnimations","arrayBars","document","getElementsByClassName","i","length","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","isRunning","auxiliaryArray","mergeSortHelper","startIndex","endIndex","mid","Math","floor","doMerge","k","j","push","bubbleSort","bubblesortHelper","querySelectorAll","first","second","firstStyle","secondStyle","change","temp","counter","quickSort","quickSortDriver","finalSwap","quickSortHelper","lo","hi","partition","findIndex","pivot","heapSort","heapSortHelper","left","right","index","largest","start","n","heapify","l","r","currentfirst","currentsecond","getContent","algoNumber","enableElements","toolbar","querySelector","rootContainer","generateNewArray","changeSize","buttonsArray","sortButton","bodyContainer","label","labels","openButton","hiddenText","offsetHeight","width","offsetWidth","MAX_INTERVAL_VALUE","MIN_INTERVAL_VALUE","SELECTED_COLOR","UNSELECTED_COLOR","ANIMATION_UPPER_BOUND","scaling","stateObject","algorithm","resetArray","currentArray","randomNumberFromInterval","min","max","random","renderingArray","map","value","scaleWidth","resetAndRenderArray","then","join","innerHTML","handleSize","e","currentTarget","window","innerWidth","id","getElementById","scaleLen","widthOfEachBar","handleSort","classList","add","remove","handleAlgoButtons","current","parseInt","forEach","button","addEventListener","ToggleMenu","toggle"],"mappings":"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","file":"My Sorting Visualizer.8ffc5869.js","sourceRoot":"..","sourcesContent":["import enableElements from \"../index.js\";\r\n\r\nconst PRIMARY_COLOR = \"red\";\r\n\r\nconst SECONDARY_COLOR = \"turquoise\";\r\n\r\n//-----------FUNCTION THAT VISUALIZES ANIMATIONS-----------\r\n\r\nfunction mergeSort(stateArray, otherObject, ANIMATION_SPEED_MS) {\r\n  const animations = getMergeSortAnimations(stateArray);\r\n  const arrayBars = document.getElementsByClassName(\"arrayBar\");\r\n  for (let i = 0; i < animations.length; i++) {\r\n    const isColorChange = i % 3 !== 2;\r\n    if (isColorChange) {\r\n      const [barOneIdx, barTwoIdx] = animations[i];\r\n      const barOneStyle = arrayBars[barOneIdx].style;\r\n      const barTwoStyle = arrayBars[barTwoIdx].style;\r\n      const color = i % 3 === 0 ? PRIMARY_COLOR : SECONDARY_COLOR;\r\n      setTimeout(() => {\r\n        barOneStyle.backgroundColor = color;\r\n        barTwoStyle.backgroundColor = color;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    } else {\r\n      setTimeout(() => {\r\n        const [barOneIdx, newHeight] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        barOneStyle.height = `${newHeight}px`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n    if (i === animations.length - 1) {\r\n      setTimeout(() => {\r\n        otherObject.isRunning = false;\r\n        enableElements(otherObject);\r\n      }, i * ANIMATION_SPEED_MS + 1000);\r\n    }\r\n  }\r\n}\r\n\r\n//-------------FUNCTION THAT GETS ANIMATION--------------\r\n\r\nfunction getMergeSortAnimations(stateArray) {\r\n  const animations = [];\r\n  if (stateArray.length <= 1) return stateArray;\r\n  const auxiliaryArray = [...stateArray];\r\n  mergeSortHelper(\r\n    stateArray,\r\n    0,\r\n    stateArray.length - 1,\r\n    auxiliaryArray,\r\n    animations\r\n  );\r\n  return animations;\r\n}\r\n\r\n//--------------FUNCTIONS THAT PERFORMS MERGE SORT--------------\r\n\r\nfunction mergeSortHelper(\r\n  stateArray,\r\n  startIndex,\r\n  endIndex,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  if (startIndex === endIndex) return;\r\n  const mid = Math.floor((startIndex + endIndex) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIndex, mid, stateArray, animations);\r\n  mergeSortHelper(auxiliaryArray, mid + 1, endIndex, stateArray, animations);\r\n  doMerge(stateArray, startIndex, mid, endIndex, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  stateArray,\r\n  startIndex,\r\n  mid,\r\n  endIndex,\r\n  auxiliaryArray,\r\n  animations\r\n) {\r\n  let k = startIndex;\r\n  let i = startIndex;\r\n  let j = mid + 1;\r\n  while (i <= mid && j <= endIndex) {\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      stateArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      stateArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= mid) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    stateArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIndex) {\r\n    animations.push([j, j]);\r\n    animations.push([j, j]);\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    stateArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}\r\nexport default mergeSort;\r\n","import enableElements from \"../index.js\";\r\n\r\nconst PRIMARY_COLOR = `red`;\r\nconst SECONDARY_COLOR = `turquoise`;\r\n\r\n//-----------FUNCTION THAT GETS ANIMATIONS AND VISUALIZES THEM-----------\r\n\r\nfunction bubbleSort(stateArray, otherObject, ANIMATION_SPEED_MS) {\r\n  const animations = bubblesortHelper(stateArray);\r\n  const arrayBars = document.querySelectorAll(`.arrayBar`);\r\n\r\n  for (let i = 0; i < animations.length; i++) {\r\n    if (i % 3 == 0) {\r\n      const [first, second] = animations[i];\r\n      const firstStyle = arrayBars[first].style;\r\n      const secondStyle = arrayBars[second].style;\r\n      setTimeout(() => {\r\n        firstStyle.backgroundColor = PRIMARY_COLOR;\r\n        secondStyle.backgroundColor = PRIMARY_COLOR;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    } else if (i % 3 === 1) {\r\n      const [first, second, change] = animations[i];\r\n      const firstStyle = arrayBars[first].style;\r\n      const secondStyle = arrayBars[second].style;\r\n      if (change === false) {\r\n        setTimeout(() => {\r\n          const temp = firstStyle.height;\r\n          firstStyle.height = `${secondStyle.height}`;\r\n          secondStyle.height = `${temp}`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    } else if (i % 3 == 2) {\r\n      const [first, second] = animations[i];\r\n      const firstStyle = arrayBars[first].style;\r\n      const secondStyle = arrayBars[second].style;\r\n      setTimeout(() => {\r\n        firstStyle.backgroundColor = SECONDARY_COLOR;\r\n        secondStyle.backgroundColor = SECONDARY_COLOR;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    }\r\n    if (i === animations.length - 1) {\r\n      setTimeout(() => {\r\n        otherObject.isRunning = false;\r\n        enableElements(otherObject);\r\n      }, i * ANIMATION_SPEED_MS + 1000);\r\n    }\r\n  }\r\n}\r\n\r\n//----------FUNCTION THAT PERFORMS BUBBLE SORT-------------\r\n\r\nfunction bubblesortHelper(stateArray) {\r\n  const animations = [];\r\n  for (let counter = 0; counter < stateArray.length - 1; counter++) {\r\n    for (let j = 0; j < stateArray.length - counter - 1; j++) {\r\n      animations.push([j, j + 1]);\r\n      if (stateArray[j] > stateArray[j + 1]) {\r\n        animations.push([j, j + 1, false]);\r\n        const temp = stateArray[j];\r\n        stateArray[j] = stateArray[j + 1];\r\n        stateArray[j + 1] = temp;\r\n      } else animations.push([j, j + 1, true]);\r\n      animations.push([j, j + 1]);\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n\r\nexport default bubbleSort;\r\n","import enableElements from \"../index.js\";\r\n\r\nconst PRIMARY_COLOR = `red`;\r\nconst SECONDARY_COLOR = `turquoise`;\r\n\r\n//-----------FUNCTION THAT GETS ANIMATIONS AND VISUALIZES THEM-----------\r\n\r\nfunction quickSort(stateArray, otherObject, ANIMATION_SPEED_MS) {\r\n  const animations = [];\r\n  quickSortDriver(stateArray, animations);\r\n\r\n  const arrayBars = document.querySelectorAll(`.arrayBar`);\r\n  for (let i = 0; i < animations.length; i++) {\r\n    if (animations[i].length === 2) {\r\n      const [first, second] = animations[i];\r\n      const firstStyle = arrayBars[first].style;\r\n      const secondStyle = arrayBars[second].style;\r\n      setTimeout(() => {\r\n        firstStyle.backgroundColor = PRIMARY_COLOR;\r\n        secondStyle.backgroundColor = PRIMARY_COLOR;\r\n      }, i * ANIMATION_SPEED_MS);\r\n    } else {\r\n      const [first, second, finalSwap] = animations[i];\r\n      const firstStyle = arrayBars[first].style;\r\n      const secondStyle = arrayBars[second].style;\r\n      if (finalSwap === 0) {\r\n        const [first, second] = animations[i];\r\n        const firstStyle = arrayBars[first].style;\r\n        const secondStyle = arrayBars[second].style;\r\n        setTimeout(() => {\r\n          firstStyle.backgroundColor = SECONDARY_COLOR;\r\n          secondStyle.backgroundColor = SECONDARY_COLOR;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else if (finalSwap === false) {\r\n        setTimeout(() => {\r\n          firstStyle.backgroundColor = SECONDARY_COLOR;\r\n          secondStyle.backgroundColor = SECONDARY_COLOR;\r\n          const temp = firstStyle.height;\r\n          firstStyle.height = `${secondStyle.height}`;\r\n          secondStyle.height = `${temp}`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const temp = firstStyle.height;\r\n          firstStyle.height = `${secondStyle.height}`;\r\n          secondStyle.height = `${temp}`;\r\n          firstStyle.backgroundColor = SECONDARY_COLOR;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n    if (i === animations.length - 1) {\r\n      setTimeout(() => {\r\n        otherObject.isRunning = false;\r\n        enableElements(otherObject);\r\n      }, i * ANIMATION_SPEED_MS + 1000);\r\n    }\r\n  }\r\n}\r\n\r\n//-------------FUNCTION THAT PERFORMS QUICKSORT-----------\r\n\r\nfunction quickSortDriver(stateArray, animations) {\r\n  quickSortHelper(stateArray, 0, stateArray.length - 1, animations);\r\n}\r\n\r\nfunction quickSortHelper(stateArray, lo, hi, animations) {\r\n  if (lo < hi) {\r\n    const partition = findIndex(stateArray, lo, hi, animations);\r\n    quickSortHelper(stateArray, lo, partition - 1, animations);\r\n    quickSortHelper(stateArray, partition + 1, hi, animations);\r\n  }\r\n}\r\n\r\n//--------------FUNCTION THAT GETS PIVOT--------------\r\n\r\nfunction findIndex(stateArray, lo, hi, animations) {\r\n  let i = lo - 1;\r\n  const pivot = stateArray[hi];\r\n  for (let j = lo; j < hi; j++) {\r\n    animations.push([j, hi]);\r\n    animations.push([j, hi, 0]);\r\n    if (stateArray[j] < pivot) {\r\n      i++;\r\n      animations.push([i, j, false]);\r\n      const temp = stateArray[i];\r\n      stateArray[i] = stateArray[j];\r\n      stateArray[j] = temp;\r\n    }\r\n  }\r\n\r\n  animations.push([i + 1, hi, true]);\r\n  const temp = stateArray[i + 1];\r\n  stateArray[i + 1] = stateArray[hi];\r\n  stateArray[hi] = temp;\r\n\r\n  return i + 1;\r\n}\r\n\r\nexport default quickSort;\r\n","import enableElements from \"../index.js\";\r\n\r\nconst PRIMARY_COLOR = \"red\";\r\n\r\nconst SECONDARY_COLOR = \"turquoise\";\r\n\r\n//-----------FUNCTION THAT GETS ANIMATIONS AND VISUALIZES THEM-----------\r\n\r\nfunction heapSort(stateArray, otherObject, ANIMATION_SPEED_MS) {\r\n  const animations = [];\r\n\r\n  heapSortHelper(stateArray, animations);\r\n\r\n  const arrayBars = document.querySelectorAll(`.arrayBar`);\r\n\r\n  for (let i = 0; i < animations.length; i++) {\r\n    if (animations[i].length === 3) {\r\n      const [first, second, change] = animations[i];\r\n\r\n      const firstStyle = arrayBars[first].style;\r\n      const secondStyle = arrayBars[second].style;\r\n\r\n      if (change === false) {\r\n        setTimeout(() => {\r\n          firstStyle.backgroundColor = PRIMARY_COLOR;\r\n          secondStyle.backgroundColor = PRIMARY_COLOR;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const temp = firstStyle.height;\r\n          firstStyle.height = `${secondStyle.height}`;\r\n          secondStyle.height = `${temp}`;\r\n          firstStyle.backgroundColor = SECONDARY_COLOR;\r\n          secondStyle.backgroundColor = SECONDARY_COLOR;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    } else if (animations[i].length === 6) {\r\n      const [left, right, index, largest, start, change] = animations[i];\r\n\r\n      if (start === false) {\r\n        setTimeout(() => {\r\n          if (left !== -1) {\r\n            arrayBars[left].style.backgroundColor = PRIMARY_COLOR;\r\n          }\r\n          if (right !== -1) {\r\n            arrayBars[right].style.backgroundColor = PRIMARY_COLOR;\r\n          }\r\n          arrayBars[index].style.backgroundColor = PRIMARY_COLOR;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        if (change === false) {\r\n          setTimeout(() => {\r\n            if (left !== -1) {\r\n              arrayBars[left].style.backgroundColor = SECONDARY_COLOR;\r\n            }\r\n            if (right !== -1) {\r\n              arrayBars[right].style.backgroundColor = SECONDARY_COLOR;\r\n            }\r\n            arrayBars[index].style.backgroundColor = SECONDARY_COLOR;\r\n          }, i * ANIMATION_SPEED_MS);\r\n        } else {\r\n          setTimeout(() => {\r\n            const temp = arrayBars[index].style.height;\r\n            arrayBars[\r\n              index\r\n            ].style.height = `${arrayBars[largest].style.height}`;\r\n            arrayBars[largest].style.height = `${temp}`;\r\n\r\n            if (left !== -1) {\r\n              arrayBars[left].style.backgroundColor = SECONDARY_COLOR;\r\n            }\r\n            if (right !== -1) {\r\n              arrayBars[right].style.backgroundColor = SECONDARY_COLOR;\r\n            }\r\n            arrayBars[index].style.backgroundColor = SECONDARY_COLOR;\r\n          }, i * ANIMATION_SPEED_MS);\r\n        }\r\n      }\r\n    }\r\n    if (i === animations.length - 1) {\r\n      setTimeout(() => {\r\n        otherObject.isRunning = false;\r\n        enableElements(otherObject);\r\n      }, i * ANIMATION_SPEED_MS + 1000);\r\n    }\r\n  }\r\n}\r\n\r\n// -----------FUNCTION THAT ACTUALLY PERFORMS HEAP SORT---------------\r\n\r\nfunction heapSortHelper(stateArray, animations) {\r\n  const n = stateArray.length;\r\n  for (let i = Math.floor(n / 2); i >= 0; i--) {\r\n    heapify(stateArray, n, i, animations);\r\n  }\r\n\r\n  for (let i = n - 1; i >= 0; i--) {\r\n    animations.push([0, i, false]);\r\n    animations.push([0, i, true]);\r\n    const temp = stateArray[0];\r\n    stateArray[0] = stateArray[i];\r\n    stateArray[i] = temp;\r\n\r\n    heapify(stateArray, i, 0, animations);\r\n  }\r\n}\r\n\r\n//--------FUNCTION THAT MAKES SURE THAT HEAP REMAINS MAX HEAP---------------\r\n\r\nfunction heapify(stateArray, n, i, animations) {\r\n  let largest = i;\r\n  const l = 2 * i + 1;\r\n  const r = 2 * i + 2;\r\n  const currentfirst = [];\r\n  const currentsecond = [];\r\n  if (l < n) {\r\n    currentfirst.push(l);\r\n    currentsecond.push(l);\r\n  } else {\r\n    currentfirst.push(-1);\r\n    currentsecond.push(-1);\r\n  }\r\n\r\n  if (r < n) {\r\n    currentfirst.push(r);\r\n    currentsecond.push(r);\r\n  } else {\r\n    currentfirst.push(-1);\r\n    currentsecond.push(-1);\r\n  }\r\n\r\n  if (l < n && stateArray[l] > stateArray[largest]) largest = l;\r\n  if (r < n && stateArray[r] > stateArray[largest]) largest = r;\r\n\r\n  currentfirst.push(i);\r\n  currentsecond.push(i);\r\n\r\n  if (largest != i) {\r\n    const temp = stateArray[i];\r\n    stateArray[i] = stateArray[largest];\r\n    stateArray[largest] = temp;\r\n    currentfirst.push(largest);\r\n    currentsecond.push(largest);\r\n    currentfirst.push(false);\r\n    currentsecond.push(true);\r\n    currentfirst.push(true);\r\n    currentsecond.push(true);\r\n\r\n    animations.push(currentfirst);\r\n    animations.push(currentsecond);\r\n    heapify(stateArray, n, largest, animations);\r\n  } else {\r\n    currentfirst.push(i);\r\n    currentsecond.push(i);\r\n    currentfirst.push(false);\r\n    currentsecond.push(true);\r\n    currentfirst.push(false);\r\n    currentsecond.push(false);\r\n    animations.push(currentfirst);\r\n    animations.push(currentsecond);\r\n  }\r\n}\r\n\r\nexport default heapSort;\r\n","//--------FUNCTION FOR DISPLAYING ALGORITHMS FOR DIFFERENT SORTING TECHNIQUES---------\r\n\r\nfunction getContent(algoNumber) {\r\n  const bubblesortAlgoHeading = \"BUBBLE SORT\";\r\n  const bubblesortAlgoPara = `do\r\n   <br>\r\n  swapped = false\r\n <br>\r\n     for i = 1 to indexOfLastUnsortedElement-1\r\n <br>\r\n     if leftElement > rightElement\r\n <br>\r\n      swap(leftElement, rightElement)\r\n <br>\r\n      swapped = true\r\n <br>\r\nwhile swapped`;\r\n\r\n  const mergesortAlgoHeading = \"MERGE SORT\";\r\n  const mergesortAlgoPara = `split each element into partitions of size 1\r\n <br>\r\nrecursively merge adjacent partitions\r\n <br>\r\nfor i = leftPartIdx to rightPartIdx\r\n <br>\r\nif leftPartHeadValue <= rightPartHeadValue\r\n <br>\r\ncopy leftPartHeadValue\r\n <br>\r\nelse: copy rightPartHeadValue\r\n <br>\r\ncopy elements back to original array`;\r\n\r\n  const quicksortAlgoHeading = \"QUICK SORT\";\r\n  const quicksortAlgoPara = `for each (unsorted) partition\r\n <br>\r\nset first element as pivot\r\n <br>\r\n  storeIndex = pivotIndex + 1\r\n <br>\r\n  for i = pivotIndex + 1 to rightmostIndex\r\n <br>\r\n    if element[i] < element[pivot]\r\n <br>\r\n      swap(i, storeIndex); storeIndex++\r\n <br>\r\n  swap(pivot, storeIndex - 1)`;\r\n\r\n  const heapsortAlgoHeading = \"HEAP SORT\";\r\n  const heapsortAlgoPara = `heap_size = N;\r\n <br>\r\n        build_maxheap with array\r\n         <br>\r\n        for i = N to i >= 0 \r\n         <br>\r\n            swap(0th element,ith element)\r\n             <br>\r\n            heap_size = heap_size - 1\r\n             <br>\r\n            max_heapify(array, 1, heap_size)\r\n             <br>\r\n        \r\n      max_heapify makes sure that the heap \r\n      </br>\r\n      remains maxheap\r\n    `;\r\n\r\n  switch (algoNumber) {\r\n    case 1:\r\n      return `\r\n    <h3>${bubblesortAlgoHeading}</h3>\r\n    <p>${bubblesortAlgoPara}</p>`;\r\n    case 2:\r\n      return `\r\n    <h3>${mergesortAlgoHeading}</h3>\r\n    <p>${mergesortAlgoPara}</p>`;\r\n    case 3:\r\n      return `\r\n    <h3>${quicksortAlgoHeading}</h3>\r\n    <p>${quicksortAlgoPara}</p>`;\r\n    case 4:\r\n      return `\r\n    <h3>${heapsortAlgoHeading}</h3>\r\n    <p>${heapsortAlgoPara}</p>`;\r\n    default:\r\n      break;\r\n  }\r\n}\r\n\r\nexport default getContent;\r\n","import mergeSort from \"./algorithms/mergeSort.js\";\r\nimport bubbleSort from \"./algorithms/bubbleSort.js\";\r\nimport quickSort from \"./algorithms/quickSort.js\";\r\nimport heapSort from \"./algorithms/heapSort.js\";\r\nimport getContent from \"./algorithms/algorithmContent.js\";\r\n\r\n// -----------SELECTING THINGS FROM DOM-------------\r\n\r\nconst toolbar = document.querySelector(`.toolbar`);\r\nconst rootContainer = document.querySelector(`.rootContainer`);\r\nconst generateNewArray = document.querySelector(`#generateArray`);\r\nconst changeSize = document.querySelector(`#changeSize`);\r\nconst buttonsArray = document.querySelectorAll(`.algoButton`);\r\nconst sortButton = document.querySelector(`#sortButton`);\r\nconst bodyContainer = document.querySelector(`.bodyContainer`);\r\nconst label = changeSize.labels[0];\r\nconst openButton = document.querySelector(`.content`);\r\nconst hiddenText = document.querySelector(`.hidden-content`);\r\n\r\n//----------CUSTOM VARIABLES OR OBJECTS---------------\r\n\r\nlet height = rootContainer.offsetHeight - toolbar.offsetHeight;\r\nlet width = rootContainer.offsetWidth;\r\nlet MAX_INTERVAL_VALUE = height - 50;\r\nlet MIN_INTERVAL_VALUE = 10;\r\nconst SELECTED_COLOR = `#9bf02c`;\r\nconst UNSELECTED_COLOR = `white`;\r\nconst ANIMATION_UPPER_BOUND = 6000;\r\nlet ANIMATION_SPEED_MS = 2;\r\n\r\nconst scaling = {\r\n  changeSize: 15\r\n};\r\nlet stateArray = [];\r\n\r\nconst stateObject = {\r\n  algorithm: -1,\r\n  isRunning: false\r\n};\r\n\r\n//-------------FUNCTION FOR RESETTING ARRAY----------\r\n\r\nasync function resetArray() {\r\n  const currentArray = [];\r\n  for (let i = 0; i < scaling.changeSize; i++) {\r\n    currentArray.push(\r\n      randomNumberFromInterval(MIN_INTERVAL_VALUE, MAX_INTERVAL_VALUE)\r\n    );\r\n  }\r\n  stateArray = [...currentArray];\r\n}\r\n\r\nfunction randomNumberFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n//-----------FUNCTION FOR RENDERING ARRAY-----------------\r\n\r\nfunction renderingArray() {\r\n  const currentArray = stateArray;\r\n  return currentArray.map((value, index) => {\r\n    return `  <div class=\"arrayBar\" id=\"arrayBar_${index}\" data-key= \"${index}\" style=\"height: ${value}px ; width : ${scaleWidth(\r\n      scaling.changeSize\r\n    )}px \";></div>`;\r\n  });\r\n}\r\n\r\n//----------------FUNCTION FOR DISPLAYING ARRAY ---------------\r\n\r\nfunction resetAndRenderArray() {\r\n  if (stateObject.isRunning) return;\r\n  resetArray().then(function() {\r\n    const currentArray = renderingArray().join(``);\r\n    bodyContainer.innerHTML = currentArray;\r\n  });\r\n}\r\n\r\nresetAndRenderArray();\r\n\r\n//------------FUNCTION FOR HANDLING SIZE--------------\r\n\r\nfunction handleSize(e) {\r\n  if (stateObject.isRunning) return;\r\n  let value = e.currentTarget.value;\r\n  if (window.innerWidth < 800) {\r\n    if (value > 15) {\r\n      value = 15;\r\n    }\r\n  }\r\n  scaling[changeSize.id] = value;\r\n  resetAndRenderArray();\r\n  setTimeout(() => {\r\n    for (let i = 0; i < scaling.changeSize; i++) {\r\n      document.getElementById(`arrayBar_${i}`).style.width = scaleWidth(\r\n        scaling.changeSize\r\n      );\r\n    }\r\n  }, 100);\r\n}\r\n\r\nconst scaleWidth = scaleLen => {\r\n  let widthOfEachBar = Math.floor(width / (3 * scaleLen));\r\n  return widthOfEachBar;\r\n};\r\n\r\n//--------------FUNCTION FOR SORT BUTTON------------\r\n\r\nfunction handleSort(e) {\r\n  if (stateObject.isRunning) return;\r\n  stateObject.isRunning = true;\r\n  sortButton.classList.add(`disabled`);\r\n  generateNewArray.classList.add(`disabled`);\r\n  changeSize.classList.add(`disabled`);\r\n  label.classList.add(`disabled`);\r\n  ANIMATION_SPEED_MS = Math.floor(\r\n    ANIMATION_UPPER_BOUND / (6 * scaling.changeSize)\r\n  );\r\n  let otherObject = {};\r\n  const algorithm = stateObject.algorithm;\r\n  switch (algorithm) {\r\n    case 1:\r\n      bubbleSort(stateArray, otherObject, ANIMATION_SPEED_MS);\r\n      break;\r\n    case 2:\r\n      mergeSort(stateArray, otherObject, ANIMATION_SPEED_MS);\r\n      break;\r\n    case 3:\r\n      quickSort(stateArray, otherObject, ANIMATION_SPEED_MS);\r\n      break;\r\n    case 4:\r\n      heapSort(stateArray, otherObject, ANIMATION_SPEED_MS);\r\n      break;\r\n    default:\r\n      return;\r\n  }\r\n}\r\n\r\n//----------FUNCTION FOR ENABLING THINGS BACK-----------\r\n\r\nfunction enableElements(otherObject) {\r\n  const { isRunning } = otherObject;\r\n  stateObject.isRunning = isRunning;\r\n  sortButton.classList.remove(`disabled`);\r\n  generateNewArray.classList.remove(`disabled`);\r\n  changeSize.classList.remove(`disabled`);\r\n  label.classList.remove(`disabled`);\r\n}\r\n\r\n//----------FUNCTION FOR ALGO BUTTONS-----------\r\n\r\nfunction handleAlgoButtons(e) {\r\n  if (stateObject.isRunning) return;\r\n  sortButton.classList.add(`running`);\r\n  const current = e.currentTarget.id;\r\n  stateObject.algorithm = parseInt(current);\r\n  buttonsArray.forEach(button => {\r\n    if (parseInt(button.id) === stateObject.algorithm) {\r\n      button.style.color = SELECTED_COLOR;\r\n      hiddenText.innerHTML = getContent(stateObject.algorithm);\r\n    } else {\r\n      button.style.color = UNSELECTED_COLOR;\r\n    }\r\n  });\r\n}\r\n\r\n//------------EVENT LISTENERTS--------------\r\n\r\ngenerateNewArray.addEventListener(`click`, resetAndRenderArray);\r\nsortButton.addEventListener(`click`, handleSort);\r\nchangeSize.addEventListener(`input`, handleSize);\r\nbuttonsArray.forEach(button => {\r\n  button.addEventListener(`click`, handleAlgoButtons);\r\n});\r\nconst ToggleMenu = () => {\r\n  hiddenText.classList.toggle(`open`);\r\n};\r\nopenButton.addEventListener(`click`, () => ToggleMenu());\r\nhiddenText.addEventListener(\"click\", () => ToggleMenu());\r\n\r\nexport default enableElements;\r\n"]}